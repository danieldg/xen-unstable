#  -*- mode: python; -*-
#============================================================================
# Python defaults setup for 'xm create'.
# Edit this file to reflect the configuration of your system.
# This file expects the variable 'vmid' to be set.
#============================================================================

def config_usage ():
    print >>sys.stderr,"""
The config file '%s' requires the following variable to be defined:
 vmid             -- Numeric identifier for the new domain, used to calculate
                     the VM's IP address and root partition. E.g. -Dvmid=1
""" % config_file


try:
    vmid = int(vmid) # convert to integer
except:
    raise ValueError, "Variable 'vmid' must be an integer"

if vmid <= 0:
    raise ValueError, "Variable 'vmid' must be greater than 0" 

#----------------------------------------------------------------------------
# Kernel image file.
image = "/boot/netbsd"

# The domain build function.
builder='netbsd'

# Initial memory allocation (in megabytes) for the new domain.
memory = 16

# A handy name for your new domain.
name = "NetBSD VM %d" % vmid

#----------------------------------------------------------------------------
# Define network interfaces.

# Number of network interfaces. Default is 1.
#nics=1

# Optionally define mac and/or bridge for the network interfaces.
# Random MACs are assigned if not given.
#vif = [ 'mac=aa:00:00:00:00:11, bridge=nbe-br' ]

# Specify IP address(es), for the new domain.  You need to
# configure IP addrs within the domain just as you do normally.  This
# is just to let Xen know about them so it can route packets
# appropriately.

#ipaddr = [ xenctl.utils.add_offset_to_ip(xenctl.utils.get_current_ipaddr(),vmid),
#           xenctl.utils.add_offset_to_ip('169.254.1.0',vmid),
#           ]

#----------------------------------------------------------------------------
# Define the disk devices you want the domain to have access to, and
# what you want them accessible as.
# Each disk entry is of the form phy:DEV,VDEV,MODE
# where DEV is the device, VDEV is the device name the domain will see,
# and MODE is r for read-only, w for read-write.

#disk = [ 'phy:sda%d,sda1,w' % (7+vmid),
#         'phy:sda6,sda6,r' ]

#----------------------------------------------------------------------------
# Set the kernel command line for the new domain.
# You only need to define the IP parameters and hostname if the domain's
# IP config doesn't, e.g. in ifcfg-eth0 or via DHCP.
# You can use 'extra' to set the runlevel and custom environment
# variables used by custom rc scripts (e.g. VMID=, usr= ).

# Set if you want dhcp to allocate the IP address.
#dhcp="dhcp"
# Set netmask.
#netmask=
# Set default gateway.
#gateway=
# Set the hostname.
#hostname= "vm%d" % vmid

# Set root device.
root = "/dev/sda1 ro"

# Root device for nfs.
#root = "/dev/nfs"
# The nfs server.
#nfs_server = '169.254.1.0'  
# Root directory on the nfs server.
#nfs_root   = '/full/path/to/root/directory'

# Sets runlevel 4 and the device for /usr.
#extra = "4 VMID=%d usr=/dev/sda6" % vmid
extra = "4 VMID=%d bootdev=xennet0" % vmid


#----------------------------------------------------------------------------
# Set according to whether you want the domain  restarted when it exits.
# The default is False.
#restart = True

#============================================================================
