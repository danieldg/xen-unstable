# Macro definitions for FLASK policy

################################################################################
#
# Domain creation and setup
#
################################################################################
# declare_domain(type, attrs...)
#   Declare a type as a domain type, and allow basic domain setup
define(`declare_domain', `
	type $1, domain_type`'ifelse(`$#', `1', `', `,shift($@)');
	type $1_channel, event_type;
	type_transition $1 domain_type:event $1_channel;
	allow $1 $1:grant { query setup };
	allow $1 $1:mmu { adjust physmap map_read map_write stat pinpage };
	allow $1 $1:hvm { getparam setparam };
')

# declare_build_label(type)
#   Declare a paired _building type for the given domain type
define(`declare_build_label', `
	type $1_building, domain_type;
	type_transition $1_building domain_type:event $1_channel;
	allow $1_building $1 : domain transition;
')

define(`create_domain_common', `
	allow $1 $2:domain { create max_vcpus setdomainmaxmem setaddrsize
			getdomaininfo hypercall setvcpucontext setextvcpucontext
			scheduler getvcpuinfo getvcpuextstate getaddrsize
			getvcpuaffinity setvcpuaffinity };
	allow $1 $2:domain2 { set_cpuid settsc };
	allow $1 $2:security check_context;
	allow $1 $2:shadow enable;
	allow $1 $2:mmu {map_read map_write adjust memorymap physmap pinpage};
	allow $1 $2:grant setup;
	allow $1 $2:hvm { cacheattr getparam hvmctl irqlevel pciroute sethvmc setparam pcilevel trackdirtyvram };
')

# create_domain(priv, target)
#   Allow a domain to be created directly
define(`create_domain', `
	create_domain_common($1, $2)
	allow $1 $2_channel:event create;
')

# create_domain_build_label(priv, target)
#   Allow a domain to be created via its domain build label
define(`create_domain_build_label', `
	create_domain_common($1, $2_building)
	allow $1 $2_channel:event create;
	allow $1 $2_building:domain2 relabelfrom;
	allow $1 $2:domain2 relabelto;
')

# manage_domain(priv, target)
#   Allow managing a running domain
define(`manage_domain', `
	allow $1 $2:domain { getdomaininfo getvcpuinfo getvcpuaffinity
			getaddrsize pause unpause trigger shutdown destroy
			setvcpuaffinity setdomainmaxmem };
')

# migrate_domain_out(priv, target)
#   Allow creation of a snapshot or migration image from a domain
#   (inbound migration is the same as domain creation)
define(`migrate_domain_out', `
	allow $1 $2:hvm { gethvmc getparam irqlevel };
	allow $1 $2:mmu { stat pageinfo map_read };
	allow $1 $2:domain { getaddrsize getvcpucontext getextvcpucontext getvcpuextstate pause destroy };
	allow $1 $2:domain2 gettsc;
')

################################################################################
#
# Inter-domain communication
#
################################################################################

# create_channel(source, dest, chan-label)
#   This allows an event channel to be created from domains with labels
#   <source> to <dest> and will label it <chan-label>
define(`create_channel', `
	allow $1 $3:event { create send status };
	allow $3 $2:event { bind };
')

# domain_event_comms(dom1, dom2)
#   Allow two domain types to communicate using event channels
define(`domain_event_comms', `
	create_channel($1, $2, $1_channel)
	create_channel($2, $1, $2_channel)
')

# domain_comms(dom1, dom2)
#   Allow two domain types to communicate using grants and event channels
define(`domain_comms', `
	domain_event_comms($1, $2)
	allow $1 $2:grant { map_read map_write copy unmap };
	allow $2 $1:grant { map_read map_write copy unmap };
')

# domain_self_comms(domain)
#   Allow a domain types to communicate with others of its type using grants
#   and event channels (this includes event channels to DOMID_SELF)
define(`domain_self_comms', `
	create_channel($1, $1, $1_channel)
	allow $1 $1:grant { map_read map_write copy unmap };
')

# device_model(dm_dom, hvm_dom)
#   Define how a device model domain interacts with its target
define(`device_model', `
	domain_comms($1, $2)
	allow $1 $2:domain { set_target shutdown };
	allow $1 $2:mmu { map_read map_write adjust physmap };
	allow $1 $2:hvm { getparam setparam trackdirtyvram hvmctl irqlevel pciroute cacheattr send_irq };
')
################################################################################
#
# Device types and delegation (PCI passthrough)
#
################################################################################

# use_device(domain, device)
#   Allow a device to be used by a domain
define(`use_device', `
    allow $1 $2:resource use;
    allow $1 $2:mmu { map_read map_write };
')

# admin_device(domain, device)
#   Allow a device to be used and delegated by a domain
define(`admin_device', `
    allow $1 $2:resource { setup stat_device add_device add_irq add_iomem add_ioport remove_device remove_irq remove_iomem remove_ioport plug unplug };
    allow $1 $2:hvm bind_irq;
    use_device($1, $2)
')

# delegate_devices(priv-domain, target-domain)
#   Allow devices to be delegated
define(`delegate_devices', `
    allow $1 $2:resource { add remove };
')
